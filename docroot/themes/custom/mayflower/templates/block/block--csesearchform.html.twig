{#
/**
 * @file
 * Theme override for the search form block -- for header search form.
 *
 * Available variables:
 * - plugin_id: The ID of the block implementation.
 * - label: The configured label of the block if visible.
 * - configuration: A list of the block's configuration values, including:
 *   - label: The configured label for the block.
 *   - label_display: The display settings for the label.
 *   - provider: The module or other provider that provided this block plugin.
 *   - Block plugin specific settings will also be stored here.
 * - content: The content of this block.
 * - attributes: A list HTML attributes populated by modules, intended to
 *   be added to the main container tag of this template. Includes:
 *   - id: A valid HTML ID and guaranteed unique.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 *
 * @see template_preprocess_block()
 * @see search_preprocess_block()
 */
#}
{%
  set classes = [
    'block',
    'block-search',
    'container-inline',
    'ma__header__search',
    'js-header-search-menu',
  ]
%}
<div{{ attributes.addClass(classes) }}>
  <section class='ma__header-search'>
    {% block content %}
      {# desktop header google custom search form. id selector used in API .draw() method at last line of api embed js below #}
      <div id="cse-search-form" style="width: 100%;">Loading</div>
      <script src="//www.google.com/jsapi" type="text/javascript"></script>
      <script type="text/javascript">
        <!--//--><![CDATA[// ><!--
        /*
          Begin google custom search js embed - DESKTOP HEADER FORM ONLY
          Using Mass.gov custom search engine at cse.google.com
          api v1 js code
         */

        /*
         * load the google custom search module
         * - with english language
         * - with minimalist theme
         */
        google.load('search', '1', {language: 'en', style: google.loader.themes.MINIMALIST});

        google.setOnLoadCallback(function() {
          var cx = '010551267445528504028:ivl9x2rf5e8'; // search engine id

          /*
           * Set custom search options
           * See: https://developers.google.com/custom-search/docs/js/cselement-reference#opt_options
           */
          var customSearchOptions = {};

          // autocomplete settings
          var autoCompleteOptions = {
            maxCompletions: 3
          };
          customSearchOptions['autoCompleteOptions'] = autoCompleteOptions;

          /*
           * Creates an instance of the CustomSearchControl object,
           * which represents a Custom Search Element. Calling this
           * constructor initializes the Custom Search service and UI.
           */
          var customSearchControl = new google.search.CustomSearchControl(cx, customSearchOptions);

          /*
           * Customize search control with available methods
           * See: https://developers.google.com/custom-search/docs/js/cselement-reference#customsearchcontrol-methods
          */
          customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);

          /*
           * Draw header search form with draw options
           * See .draw() at: https://developers.google.com/custom-search/docs/js/cselement-reference#csedrawoptions-el
          */
          var options = new google.search.DrawOptions();
          /*
           * only draw search form (results are handled in
           * teamplates layout/page--node--6)
           *
           * set search results path and search term query
           */
          options.enableSearchboxOnly('/search', 'q');

          /*
           * enable autocomplete (see options above: autoCompleteOptions)
           */
          options.setAutoComplete(true);

          /*
           * Displays the search form. Calling this method is the final step
           * in activating a Custom Search Element object, and it produces the
           * UI and search containers.
           *
           * .draw(selector, options)
           */
          customSearchControl.draw('cse-search-form', options);

        }, true);

        //--><!]]>
      </script>

      {# mobile-only faux search button that opens mobile menu on click #}
      <button class="ma__button-search">
        <span>Search</span>
        <svg role="img" class="ma__button-search__icon">
          <use xlink:href="/{{directory}}/images/svg-sprite.svg#search"></use>
        </svg>
      </button>
      <script type="text/javascript">
        (function(){
          // ****** Mobile Search button should open mobile menu ******
          var mobileSearchButton = document.querySelector(".ma__header__search .ma__header-search .ma__button-search");

          if(null !== mobileSearchButton){
            mobileSearchButton.addEventListener("click", function(event) {
              event.preventDefault();
              document.querySelector("body").classList.toggle("show-menu");
            });
          }
        })();
      </script>
      {# common search form styles live in templates/includes/
           block--csesearchform--mobile #}
    {% endblock %}
  </section>
</div><!-- .ma__header__search -->
